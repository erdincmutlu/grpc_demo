// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcdemo.proto

package grpcdemopb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fbeaf5fd8369486, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "grpcdemopb.Empty")
}

func init() { proto.RegisterFile("grpcdemo.proto", fileDescriptor_9fbeaf5fd8369486) }

var fileDescriptor_9fbeaf5fd8369486 = []byte{
	// 100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2f, 0x2a, 0x48,
	0x4e, 0x49, 0xcd, 0xcd, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x82, 0xf1, 0x0b, 0x92,
	0x94, 0xd8, 0xb9, 0x58, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x8d, 0x1c, 0xb9, 0x38, 0xdc, 0x8b, 0x0a,
	0x92, 0x5d, 0x52, 0x73, 0xf3, 0x85, 0x4c, 0xb9, 0xb8, 0x43, 0x52, 0x8b, 0x4b, 0xdc, 0x52, 0x13,
	0x4b, 0x4a, 0x8b, 0x52, 0x85, 0x04, 0xf5, 0x10, 0x1a, 0xf4, 0xc0, 0xaa, 0xa5, 0x30, 0x85, 0x94,
	0x18, 0x92, 0xd8, 0xc0, 0xc6, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xac, 0xdc, 0x1c, 0xe3,
	0x70, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcDemoClient is the client API for GrpcDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcDemoClient interface {
	TestFeature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type grpcDemoClient struct {
	cc *grpc.ClientConn
}

func NewGrpcDemoClient(cc *grpc.ClientConn) GrpcDemoClient {
	return &grpcDemoClient{cc}
}

func (c *grpcDemoClient) TestFeature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpcdemopb.GrpcDemo/TestFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcDemoServer is the server API for GrpcDemo service.
type GrpcDemoServer interface {
	TestFeature(context.Context, *Empty) (*Empty, error)
}

// UnimplementedGrpcDemoServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcDemoServer struct {
}

func (*UnimplementedGrpcDemoServer) TestFeature(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestFeature not implemented")
}

func RegisterGrpcDemoServer(s *grpc.Server, srv GrpcDemoServer) {
	s.RegisterService(&_GrpcDemo_serviceDesc, srv)
}

func _GrpcDemo_TestFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).TestFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdemopb.GrpcDemo/TestFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).TestFeature(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcDemo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdemopb.GrpcDemo",
	HandlerType: (*GrpcDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestFeature",
			Handler:    _GrpcDemo_TestFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcdemo.proto",
}
